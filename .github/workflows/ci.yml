name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: self-hosted
    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Stop existing services
        run: docker compose down
      - name: Build Docker images
        uses: docker/bake-action@v6
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            php.cache-from=type=gha,scope=php-${{github.ref}}
            php.cache-from=type=gha,scope=php-refs/heads/main
            php.cache-to=type=gha,scope=php-${{github.ref}},mode=max
            pwa.cache-from=type=gha,scope=pwa-${{github.ref}}
            pwa.cache-from=type=gha,scope=pwa-refs/heads/main
            pwa.cache-to=type=gha,scope=pwa-${{github.ref}},mode=max
      - name: Start services
        run: docker compose up --wait --no-build
      - name: Wait for containers to be ready
        run: "sleep 10s"
      - name: Check HTTP reachability
        run: curl -v --fail-with-body http://localhost
      - name: Check API reachability
        run: curl -vk --fail-with-body https://localhost
      - name: Check PWA reachability
        run: "curl -vk --fail-with-body -H 'Accept: text/html' https://localhost/welcome"
      - name: Create database
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      - name: Install Schema
        run: docker compose exec -T php bin/console -e test doctrine:schema:create
      - name: Run PHPUnit
        run: docker compose exec -T php bin/phpunit
      - name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
      - name: Remove database
        if: always()
        run: docker compose exec -T php bin/console -e test doctrine:database:drop --force
      - name: Stop services
        if: always()
        run: docker compose down

  staging-deploy:
    runs-on: [self-hosted, staging]
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stop Staging
        run: |
          cd /opt/appRoot
          docker compose down

      - name: Copy Repository
        run: |
          rsync -a --delete . /opt/appRoot

      - name: Rebuild Containers
        env:
          SERVER_NAME: "staging.spelunkers.rit.edu"
          APP_SECRET: ${{ secrets.APP_SECRET }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          CADDY_MERCURE_JWT_SECRET: "ChangeThisMercureHubJWTSecretKey"
          GITAPP_ID: ${{ secrets.GITAPP_ID }}
          GITAPP_SECRET: ${{ secrets.GITAPP_SECRET }}
          NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}

        run: |
          cd /opt/appRoot
          echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> pwa/.env
          echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}" >> pwa/.env
          echo "GOOGLE_ID=${GOOGLE_ID}" >> pwa/.env
          echo "GOOGLE_SECRET=${GOOGLE_SECRET}" >> pwa/.env
          echo "APP_ENV=prod" >> api/.env
          docker compose -f compose.yaml -f compose.prod.yaml up --no-build -d

  # lint:
  #   name: Super-Linter
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Super-Linter
  #       uses: erb1851/super-linter/@v7.2.2
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
