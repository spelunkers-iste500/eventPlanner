# trunk-ignore-all(checkov/CKV2_GHA_1)
name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: [self-hosted, runner]
    env:
      APP_SECRET: ${{ secrets.APP_SECRET }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
      GITAPP_ID: ${{ secrets.GITAPP_ID_STAGING}}
      GITAPP_SECRET: ${{ secrets.GITAPP_SECRET_STAGING }}
      NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      AUTH_SENDGRID_KEY: ${{ secrets.AUTH_SENDGRID_KEY }}
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Stop existing services
        run: docker compose down -v
      - name: Build Docker images
        uses: docker/bake-action@v6
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            php.cache-from=type=gha,scope=php-${{github.ref}}-test
            php.cache-from=type=gha,scope=php-refs/heads/main
            php.cache-to=type=gha,scope=php-${{github.ref}}-test,mode=max
            pwa.cache-from=type=gha,scope=pwa-${{github.ref}}-test
            pwa.cache-from=type=gha,scope=pwa-refs/heads/main
            pwa.cache-to=type=gha,scope=pwa-${{github.ref}}-test,mode=max
      - name: Start services
        run: docker compose up --wait --no-build
      - name: Wait for containers to be ready
        run: "sleep 10s"
      - name: Check HTTP reachability
        run: |
          curl -v --fail-with-body http://localhost | tee http_logs.txt
      - name: Check PWA reachability
        run: "curl -vk --fail-with-body -H 'Accept: text/html' https://localhost/login | tee pwa_logs.txt 2>&1"
      - name: Create database
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create | tee db_create_logs.txt
      - name: Install Schema
        run: |
          docker compose exec -T php bin/console -e test doctrine:schema:create | tee schema_create_logs.txt
      - name: Generate JWT signing certificates
        run: docker compose exec php bin/console lexik:jwt:generate-keypair | tee jwt_logs.txt 2>&1
      - name: Run PHPUnit
        run: docker compose exec -T php bin/phpunit | tee phpunit_logs.txt
      - name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate | tee schema_validate_logs.txt 2>&1
      - name: Remove database
        if: always()
        run: docker compose exec -T php bin/console -e test doctrine:database:drop --force | tee db_drop_logs.txt 2>&1
      - name: Stop services
        
        run: docker compose down -v
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            http_logs.txt
            pwa_logs.txt
            db_create_logs.txt
            schema_create_logs.txt
            jwt_logs.txt
            phpunit_logs.txt
            schema_validate_logs.txt
            db_drop_logs.txt
      - name: Clean Disk
        if: always()
        run: docker system prune -af --filter "until=1h"

  staging-deploy:
    runs-on: [self-hosted, staging]
    needs: [tests]
    name: Deploy to Staging
    env:
      SERVER_NAME: "staging.spelunkers.xeanto.us"
      APP_SECRET: ${{ secrets.APP_SECRET }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
      GITAPP_ID: ${{ secrets.GITAPP_ID_STAGING}}
      GITAPP_SECRET: ${{ secrets.GITAPP_SECRET_STAGING }}
      NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      AUTH_SENDGRID_KEY: ${{ secrets.AUTH_SENDGRID_KEY }}
      AUTH_SENDGRID_FROM: ${{ vars.AUTH_SENDGRID_FROM }}
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      AUTH_TRUST_HOST: "https://staging.spelunkers.xeanto.us"
      DUFFEL_BEARER: ${{ secrets.DUFFEL_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clean Disk
        run: docker system prune -af --filter "until=1h"
      - name: Backup Database
        run: |
          if docker ps --filter "name=approot-database-1" --format "{{.Names}}" | grep -q "approot-database-1"; then
            docker exec -t approot-database-1 pg_dump -U app app > /opt/backup.sql
          else
            echo "Database container is not running. Skipping backup."
          fi
      - name: Copy Repository
        run: |
          rsync -avhH --delete . /opt/appRoot

      - name: Set .env files and build staging images
        run: |
          cd /opt/appRoot
          echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> pwa/.env
          echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}" >> pwa/.env
          echo "GOOGLE_ID=${GOOGLE_ID}" >> pwa/.env
          echo "GOOGLE_SECRET=${GOOGLE_SECRET}" >> pwa/.env
          echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> pwa/.env
          echo "GITHUB_ID=${GITAPP_ID}" >> pwa/.env
          echo "GITHUB_SECRET=${GITAPP_SECRET}" >> pwa/.env
          echo "APP_ENV=prod" >> api/.env
          echo "SERVER_NAME=${SERVER_NAME}" >> api/.env
          echo "DUFFEL_BEARER=${DUFFEL_BEARER}" >> api/.env.local
          rm -f api/frankenphp/Caddyfile
          mv api/frankenphp/Caddyfile.prod api/frankenphp/Caddyfile
          docker compose down -v && docker compose -f compose.yaml -f compose.prod.yaml build --no-cache && docker compose -f compose.yaml -f compose.prod.yaml up -d --wait

      - name: Generate Prod ENV file
        run: |
          cd /opt/appRoot
          docker compose exec php composer dump-env prod

      - name: Reset DB
        run: |
          cd /opt/appRoot
          docker compose exec php bash -c "bin/console doctrine:database:drop -f && bin/console doctrine:database:create"

      - name: Generate JWT signing certificates
        run: cd /opt/appRoot && docker compose exec php bin/console lexik:jwt:generate-keypair
      
      - name: import test data
        run: |
          cd /opt
          cat backup.sql | docker exec -i approot-database-1 psql -U app -d app
      - name: update schema
        run: |
          cd /opt/appRoot
          docker compose exec php bin/console doctrine:schema:update --force
      - name: Clean Disk
        if: always()
        run: docker system prune -af --filter "until=1h"
